:uncons
    [dup first swap rest]
def


:sum
    [dup null
        [drop 0]
        [uncons sum +]
        if
    ]
def


:mul
    [dup null
        [drop 0]
        [uncons dup null
            [drop 1 *]
            [mul *]
            if
        ]
        if
    ]
def


:butlast
    [dup null
        [drop]
        [uncons dup null
            [drop drop []]
            [butlast cons]
            if
        ]
        if
    ]
def


:sorted_helper
    [dup null
        [drop true]
        [uncons dup null
            [drop drop]
            [dup first swap [<] dip dup null
                [drop drop]
                [sorted_helper and]
                if
            ]
            if
        ]
        if
    ]
def

:sorted
    [dup null
        [drop true]
        [true swap sorted_helper]
        if
    ]
def


:member
    [dup null
        [drop false]
        [dup first [swap] dip swap dup [swap] dip  =
            [drop drop true]
            [swap rest member]
            if
        ]
        if
    ]
def

:append_helper
    [dup null
        [drop]
        [uncons [swap] dip append_helper cons]
        if
    ]
def

:append
    [swap append_helper]
def


:reverse_helper
    [ dup null
        [drop]
        [uncons [swap cons] dip reverse_helper]
        if
    ]
def


:reverse
    [[] swap reverse_helper]
def


:map_helper
    [swap dup null
        [[swap] dip drop drop]
        [uncons [[[dup]dip swap]dip swap] dip swap [swap] dip i [swap] dip swap cons map_helper]
        if
    ]
def


:map
    [[] map_helper reverse]
def


:filter_helper
    [ [[ dup ] dip swap ] dip swap dup null
        [drop swap drop swap drop]
        [ first [[dup] dip  swap] dip swap [dup] dip i
            [swap cons ]
            [drop ]
            if
            [[ rest ] dip] dip
            filter_helper
        ]
        if
    ]
def


:filter
    [[] filter_helper reverse]
def


[1 2 3] [2 *] map
[-5 7 1 8 -4] [0 >] filter
